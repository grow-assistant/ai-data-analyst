version: '3.8'

services:
  # Data Loader Agent
  data-loader:
    build: .
    container_name: ai-data-analyst-loader
    ports:
      - "10006:10006"
    environment:
      - AGENT_NAME=data_loader
      - AGENT_PORT=10006
      - LOG_LEVEL=INFO
    command: ["python", "-m", "data_loader"]
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./outputs:/app/outputs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Data Cleaning Agent
  data-cleaning:
    build: .
    container_name: ai-data-analyst-cleaning
    ports:
      - "10008:10008"
    environment:
      - AGENT_NAME=data_cleaning
      - AGENT_PORT=10008
      - LOG_LEVEL=INFO
    command: ["python", "-m", "data_cleaning_agent"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./sessions:/app/sessions
    depends_on:
      data-loader:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Data Cleaning MCP Tool Server
  data-cleaning-tools:
    build: .
    container_name: ai-data-analyst-cleaning-tools
    ports:
      - "11008:11008"
    environment:
      - AGENT_NAME=data_cleaning_tools
      - AGENT_PORT=11008
      - LOG_LEVEL=INFO
    command: ["python", "-m", "data_cleaning_agent.mcp_server"]
    volumes:
      - ./logs:/app/logs
      - ./sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11008/tools"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Data Enrichment Agent
  data-enrichment:
    build: .
    container_name: ai-data-analyst-enrichment
    ports:
      - "10009:10009"
    environment:
      - AGENT_NAME=data_enrichment
      - AGENT_PORT=10009
      - LOG_LEVEL=INFO
    command: ["python", "-m", "data_enrichment_agent"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./sessions:/app/sessions
    depends_on:
      data-cleaning:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10009/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Data Analyst Agent
  data-analyst:
    build: .
    container_name: ai-data-analyst-analyst
    ports:
      - "10007:10007"
    environment:
      - AGENT_NAME=data_analyst
      - AGENT_PORT=10007
      - LOG_LEVEL=INFO
    command: ["python", "-m", "data_analyst"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./sessions:/app/sessions
    depends_on:
      data-enrichment:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Root Cause Analyst Agent
  rootcause-analyst:
    build: .
    container_name: ai-data-analyst-rootcause
    ports:
      - "10011:10011"
    environment:
      - AGENT_NAME=rootcause_analyst
      - AGENT_PORT=10011
      - LOG_LEVEL=INFO
    command: ["python", "-m", "rootcause_analyst"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./sessions:/app/sessions
    depends_on:
      data-analyst:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10011/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Presentation Agent
  presentation:
    build: .
    container_name: ai-data-analyst-presentation
    ports:
      - "10010:10010"
    environment:
      - AGENT_NAME=presentation
      - AGENT_PORT=10010
      - LOG_LEVEL=INFO
    command: ["python", "-m", "presentation_agent"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./sessions:/app/sessions
    depends_on:
      rootcause-analyst:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10010/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Schema Profiler Agent
  schema-profiler:
    build: .
    container_name: ai-data-analyst-profiler
    ports:
      - "10012:10012"
    environment:
      - AGENT_NAME=schema_profiler
      - AGENT_PORT=10012
      - LOG_LEVEL=INFO
    command: ["python", "-m", "schema_profiler"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./data:/app/data
      - ./sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10012/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Orchestrator Agent (main coordinator)
  orchestrator:
    build: .
    container_name: ai-data-analyst-orchestrator
    ports:
      - "10005:10005"
    environment:
      - AGENT_NAME=orchestrator
      - AGENT_PORT=10005
      - LOG_LEVEL=INFO
    command: ["python", "-m", "orchestrator_agent"]
    volumes:
      - ./logs:/app/logs
      - ./outputs:/app/outputs
      - ./data:/app/data
      - ./sessions:/app/sessions
    depends_on:
      data-loader:
        condition: service_healthy
      data-cleaning:
        condition: service_healthy
      data-enrichment:
        condition: service_healthy
      data-analyst:
        condition: service_healthy
      rootcause-analyst:
        condition: service_healthy
      presentation:
        condition: service_healthy
      schema-profiler:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:10005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - ai-agents-network
    restart: unless-stopped

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-data-analyst-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - ai-agents-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: ai-data-analyst-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - ai-agents-network
    restart: unless-stopped

  # OTLP Collector for OpenTelemetry
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: ai-data-analyst-otel
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics endpoint
    volumes:
      - ./monitoring/otel-collector-config.yml:/etc/otel-collector-config.yml
    command: ["--config=/etc/otel-collector-config.yml"]
    networks:
      - ai-agents-network
    restart: unless-stopped

networks:
  ai-agents-network:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data: 